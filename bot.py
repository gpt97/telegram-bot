import asyncio
from aiogram import Bot, Dispatcher, F
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.client.default import DefaultBotProperties

API_TOKEN = '7966119362:AAE7fdqi5IhJbCRrOGSSWC2YSuS0qtD8lIE'

ADMIN_ID = 713419084  # —Ç–≤–æ–π Telegram ID (–ø—Ä–æ–≤–µ—Ä–µ–Ω–æ —á–µ—Ä–µ–∑ /me)

bot = Bot(
    token=API_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher()

# –ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤
from pathlib import Path
import json

def load_catalog():
    catalog_file = Path("catalog.json")
    if catalog_file.exists():
        with open(catalog_file, "r", encoding="utf-8") as f:
            return json.load(f)
    return []



user_carts = {}  # —Å–ª–æ–≤–∞—Ä—å: user_id ‚Üí —Å–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
user_states = {}  # user_id -> —Å–æ—Å—Ç–æ—è–Ω–∏–µ ('wait_name', 'wait_address', –∏ —Ç.–ø.)
adding_state = {}  # user_id ‚Üí –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
user_orders = {}  # –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∑–∞–∫–∞–∑–∞: user_id -> {'name': ..., 'address': ...}
    
    
@dp.message(Command("start"))
async def cmd_start(message: Message):
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üì¶ –ö–∞—Ç–∞–ª–æ–≥", callback_data="menu_catalog")],
        [InlineKeyboardButton(text="üß∫ –ö–æ—Ä–∑–∏–Ω–∞", callback_data="menu_cart")],
        [InlineKeyboardButton(text="üóë –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É", callback_data="menu_clear")],
        [InlineKeyboardButton(text="üìã –ú–æ–∏ –∑–∞–∫–∞–∑—ã", callback_data="menu_myorders")]
    ])
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb)


@dp.message(Command("catalog"))
async def show_categories(message: Message):
    catalog_data = load_catalog()
    if not catalog_data:
        await message.answer("üì¶ –ö–∞—Ç–∞–ª–æ–≥ –ø—É—Å—Ç.")
        return

    # –°–æ–±–µ—Ä—ë–º —Å–ø–∏—Å–æ–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    categories = sorted(set(item.get("category", "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏") for item in catalog_data))

    # –°—Ñ–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏
    buttons = [[InlineKeyboardButton(text=cat, callback_data=f"category_{cat}")] for cat in categories]
    kb = InlineKeyboardMarkup(inline_keyboard=buttons)

    await message.answer("üóÇ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=kb)


        
@dp.message(Command("cart"))
async def show_cart(message: Message):
    user_id = message.chat.id
    cart = user_carts.get(user_id, [])

    if not cart:
        await message.answer("üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.")
    else:
        text = "<b>üß∫ –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:</b>\n\n"
        for i, item in enumerate(cart, 1):
            text += f"{i}. {item['name']} ‚Äî {item['price']}\n"
        await message.answer(text)
        

@dp.message(Command("clear"))
async def clear_cart(message: Message):
    user_id = message.chat.id
    user_carts[user_id] = []
    await message.answer("üóë –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –±—ã–ª–∞ –æ—á–∏—â–µ–Ω–∞.")

@dp.message(Command("order"))
async def start_order(message: Message):
    user_id = message.from_user.id
    cart = user_carts.get(user_id, [])

    if not cart:
        await message.answer("‚ùå –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞. –î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –ø–µ—Ä–µ–¥ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º –∑–∞–∫–∞–∑–∞.")
        return

    user_states[user_id] = "wait_name"
    user_orders[user_id] = {}
    await message.answer("üìã –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞:")

@dp.message(~F.text.startswith("/"))
async def handle_order_steps(message: Message):
    user_id = message.from_user.id
    state = user_states.get(user_id)
    
    if state == "adding_category":
        new_category = message.text.strip()

        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫
        categories_file = Path("categories.json")
        if categories_file.exists():
            with open(categories_file, "r", encoding="utf-8") as f:
                categories = json.load(f)
        else:
            categories = []

        if new_category in categories:
            await message.answer("‚ö†Ô∏è –¢–∞–∫–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
        else:
            categories.append(new_category)
            with open(categories_file, "w", encoding="utf-8") as f:
                json.dump(categories, f, ensure_ascii=False, indent=2)
            await message.answer(f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è <b>{new_category}</b> –¥–æ–±–∞–≤–ª–µ–Ω–∞.", parse_mode="HTML")

        user_states.pop(user_id, None)
        return

    
    if state == "editing_id":
        edit_id = message.text.strip()

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ç–∞–ª–æ–≥
        catalog_file = Path("catalog.json")
        if catalog_file.exists():
            with open(catalog_file, "r", encoding="utf-8") as f:
                catalog_data = json.load(f)
        else:
            await message.answer("üì≠ –ö–∞—Ç–∞–ª–æ–≥ –ø—É—Å—Ç.")
            return

        # –ù–∞–π–¥—ë–º —Ç–æ–≤–∞—Ä
        item = next((i for i in catalog_data if i["id"] == edit_id), None)
        if not item:
            await message.answer("‚ùå –¢–æ–≤–∞—Ä —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            user_states.pop(user_id, None)
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ ID
        adding_state[user_id] = {"id": edit_id}
        user_states[user_id] = "editing_name"
        await message.answer(f"‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è <b>{item['name']}</b>:", parse_mode="HTML")
        return
        
    if state == "editing_name":
        adding_state[user_id]["name"] = message.text
        user_states[user_id] = "editing_price"
        await message.answer("üí∞ –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É:")
        return
        
    if state == "editing_price":
        adding_state[user_id]["price"] = message.text

        edit_id = adding_state[user_id]["id"]

        catalog_file = Path("catalog.json")
        with open(catalog_file, "r", encoding="utf-8") as f:
            catalog_data = json.load(f)

        for item in catalog_data:
            if item["id"] == edit_id:
                item["name"] = adding_state[user_id]["name"]
                item["price"] = adding_state[user_id]["price"]
                break

        with open(catalog_file, "w", encoding="utf-8") as f:
            json.dump(catalog_data, f, ensure_ascii=False, indent=2)

        await message.answer(f"‚úÖ –¢–æ–≤–∞—Ä —Å ID <code>{edit_id}</code> –æ–±–Ω–æ–≤–ª—ë–Ω!", parse_mode="HTML")

        user_states.pop(user_id, None)
        adding_state.pop(user_id, None)
        return



    
    if state == "deleting_item":
        delete_id = message.text.strip()

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ç–∞–ª–æ–≥
        catalog_file = Path("catalog.json")
        if catalog_file.exists():
            with open(catalog_file, "r", encoding="utf-8") as f:
                catalog_data = json.load(f)
        else:
            await message.answer("üì≠ –ö–∞—Ç–∞–ª–æ–≥ –ø—É—Å—Ç.")
            return

        new_catalog = [item for item in catalog_data if item["id"] != delete_id]

        if len(new_catalog) == len(catalog_data):
            await message.answer("‚ö†Ô∏è –¢–æ–≤–∞—Ä —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        else:
            with open(catalog_file, "w", encoding="utf-8") as f:
                json.dump(new_catalog, f, ensure_ascii=False, indent=2)
            await message.answer(f"‚úÖ –¢–æ–≤–∞—Ä —Å ID <code>{delete_id}</code> —É–¥–∞–ª—ë–Ω.", parse_mode="HTML")

        user_states.pop(user_id, None)
        return


    if state == "adding_name":
        adding_state[user_id]["name"] = message.text
        user_states[user_id] = "adding_price"
        await message.answer("üí∞ –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞:")
        return

    adding_state[user_id]["price"] = message.text

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    categories_file = Path("categories.json")
    if categories_file.exists():
        with open(categories_file, "r", encoding="utf-8") as f:
            categories = json.load(f)
    else:
        categories = []

    if not categories:
        await message.answer("‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π. –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —á–µ—Ä–µ–∑ /add_category.")
        user_states.pop(user_id, None)
        adding_state.pop(user_id, None)
        return

    # –ö–Ω–æ–ø–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    buttons = [[InlineKeyboardButton(text=cat, callback_data=f"cat_{cat}")] for cat in categories]
    kb = InlineKeyboardMarkup(inline_keyboard=buttons)

    user_states[user_id] = "awaiting_category"
    await message.answer("üóÇ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —Ç–æ–≤–∞—Ä–∞:", reply_markup=kb)
    return

        

    if state == "wait_name":
        user_orders[user_id]["name"] = message.text
        user_states[user_id] = "wait_address"
        await message.answer("üì¶ –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:")

    elif state == "wait_address":
        user_orders[user_id]["address"] = message.text
        cart = user_carts.get(user_id, [])
        name = user_orders[user_id]["name"]
        address = user_orders[user_id]["address"]

        # –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
        text = f"<b>‚úÖ –ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω!</b>\n\n"
        text += f"<b>–ò–º—è:</b> {name}\n"
        text += f"<b>–ê–¥—Ä–µ—Å:</b> {address}\n\n"
        text += "<b>–¢–æ–≤–∞—Ä—ã:</b>\n"
        for i, item in enumerate(cart, 1):
            text += f"{i}. {item['name']} ‚Äî {item['price']}\n"

        # –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω—É
        if user_id != ADMIN_ID:
            await bot.send_message(
                ADMIN_ID,
                f"üì• –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –æ—Ç <b>{name}</b>\n"
                f"üìç –ê–¥—Ä–µ—Å: {address}\n\n"
                f"<b>–¢–æ–≤–∞—Ä—ã:</b>\n" +
                "\n".join([f"‚Ä¢ {item['name']} ‚Äî {item['price']}" for item in cart]),
                parse_mode="HTML"
            )

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª
        from datetime import datetime        
        
        order_data = {
            "user_id": user_id,
            "name": name,
            "address": address,
            "items": cart,
            "timestamp": datetime.now().isoformat()
        }

        orders_file = Path("orders.json")
        if orders_file.exists():
            with open(orders_file, "r", encoding="utf-8") as f:
                all_orders = json.load(f)
        else:
            all_orders = []

        all_orders.append(order_data)

        with open(orders_file, "w", encoding="utf-8") as f:
            json.dump(all_orders, f, ensure_ascii=False, indent=2)

        await message.answer(text)

        # –°–±—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö
        user_states.pop(user_id, None)
        user_orders.pop(user_id, None)
        user_carts[user_id] = []


        
@dp.message(Command("myorders"))
async def show_my_orders(message: Message):
    from pathlib import Path
    import json

    user_id = message.from_user.id
    print(f"[DEBUG] –í—ã–∑–≤–∞–Ω /myorders –æ—Ç user_id={user_id}")  # –æ—Ç–ª–∞–¥–∫–∞

    orders_file = Path("orders.json")

    if not orders_file.exists():
        await message.answer("‚ùå –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.")
        return

    try:
        with open(orders_file, "r", encoding="utf-8") as f:
            all_orders = json.load(f)
    except json.JSONDecodeError:
        await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∑–∞–∫–∞–∑—ã.")
        return

    user_orders_list = [o for o in all_orders if o["user_id"] == user_id]

    print(f"[DEBUG] –ù–∞–π–¥–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤: {len(user_orders_list)}")  # –æ—Ç–ª–∞–¥–∫–∞

    if not user_orders_list:
        await message.answer("üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.")
        return

    response = "<b>üìã –í–∞—à–∏ –∑–∞–∫–∞–∑—ã:</b>\n\n"
    for i, order in enumerate(user_orders_list, 1):
        response += f"<b>{i}.</b> {order['name']}, {order['address']}\n"
        for item in order["items"]:
            response += f"‚Ä¢ {item['name']} ‚Äî {item['price']}\n"
        response += "\n"

    await message.answer(response)
    
@dp.message(Command("allorders"))
async def show_all_orders(message: Message):
    from pathlib import Path
    import json

    if message.from_user.id != ADMIN_ID:
        await message.answer("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return

    orders_file = Path("orders.json")
    if not orders_file.exists():
        await message.answer("‚ùå –ó–∞–∫–∞–∑–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.")
        return

    try:
        with open(orders_file, "r", encoding="utf-8") as f:
            all_orders = json.load(f)
    except json.JSONDecodeError:
        await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª –∑–∞–∫–∞–∑–æ–≤.")
        return

    if not all_orders:
        await message.answer("üì≠ –ó–∞–∫–∞–∑–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.")
        return

    response = "<b>üì¶ –í—Å–µ –∑–∞–∫–∞–∑—ã:</b>\n\n"
    for i, order in enumerate(all_orders, 1):
        response += f"<b>{i}.</b> {order['name']}, {order['address']} (ID: {order['user_id']})\n"
        for item in order["items"]:
            response += f"‚Ä¢ {item['name']} ‚Äî {item['price']}\n"
        response += "\n"

    await message.answer(response)
    
@dp.message(Command("export"))
async def export_orders(message: Message):
    if message.from_user.id != ADMIN_ID:
        await message.answer("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return

    from openpyxl import Workbook
    from pathlib import Path
    import json

    orders_file = Path("orders.json")
    if not orders_file.exists():
        await message.answer("üì≠ –ó–∞–∫–∞–∑–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.")
        return

    with open(orders_file, "r", encoding="utf-8") as f:
        orders = json.load(f)

    if not orders:
        await message.answer("üì≠ –ó–∞–∫–∞–∑–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.")
        return

    # –°–æ–∑–¥–∞—ë–º Excel-—Ñ–∞–π–ª
    wb = Workbook()
    ws = wb.active
    ws.title = "–ó–∞–∫–∞–∑—ã"

    # –ó–∞–≥–æ–ª–æ–≤–∫–∏
    ws.append(["ID", "–ò–º—è", "–ê–¥—Ä–µ—Å", "–¢–æ–≤–∞—Ä—ã", "–î–∞—Ç–∞"])

    for order in orders:
        items_str = "\n".join(f"{i['name']} ‚Äî {i['price']}" for i in order["items"])
        ws.append([
            order["user_id"],
            order["name"],
            order["address"],
            items_str,
            order["timestamp"]
        ])

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
    file_path = Path("orders.xlsx")
    wb.save(file_path)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
    from aiogram.types import FSInputFile

    excel_file = FSInputFile(path=file_path)
    await message.answer_document(excel_file, caption="üìÑ –ó–∞–∫–∞–∑—ã —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ Excel")

    # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ (–µ—Å–ª–∏ –Ω–µ —Ö–æ—á–µ—à—å ‚Äî –º–æ–∂–Ω–æ –Ω–µ —É–¥–∞–ª—è—Ç—å)
    file_path.unlink()

    
@dp.message(Command("add"))
async def start_add(message: Message):
    if message.from_user.id != ADMIN_ID:
        await message.answer("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return

    adding_state[message.from_user.id] = {}
    user_states[message.from_user.id] = "adding_name"
    await message.answer("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞:")

@dp.message(Command("delete"))
async def start_delete(message: Message):
    if message.from_user.id != ADMIN_ID:
        await message.answer("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return

    catalog_data = load_catalog()
    if not catalog_data:
        await message.answer("üì≠ –ö–∞—Ç–∞–ª–æ–≥ –ø—É—Å—Ç.")
        return

    # –û—Ç–ø—Ä–∞–≤–∏–º —Å–ø–∏—Å–æ–∫ —Å ID
    text = "<b>üóë –ß—Ç–æ —É–¥–∞–ª–∏—Ç—å? –í–≤–µ–¥–∏—Ç–µ ID —Ç–æ–≤–∞—Ä–∞:</b>\n\n"
    for item in catalog_data:
        text += f"ID: <code>{item['id']}</code> ‚Äî {item['name']} ({item['price']})\n"
    
    user_states[message.from_user.id] = "deleting_item"
    await message.answer(text, parse_mode="HTML")

@dp.message(Command("edit"))
async def start_edit(message: Message):
    if message.from_user.id != ADMIN_ID:
        await message.answer("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return

    catalog_data = load_catalog()
    if not catalog_data:
        await message.answer("üì≠ –ö–∞—Ç–∞–ª–æ–≥ –ø—É—Å—Ç.")
        return

    text = "<b>‚úèÔ∏è –ß—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å? –í–≤–µ–¥–∏—Ç–µ ID —Ç–æ–≤–∞—Ä–∞:</b>\n\n"
    for item in catalog_data:
        text += f"ID: <code>{item['id']}</code> ‚Äî {item['name']} ({item['price']})\n"

    user_states[message.from_user.id] = "editing_id"
    await message.answer(text, parse_mode="HTML")
    
@dp.message(Command("me"))
async def show_user_id(message: Message):
    user_id = message.from_user.id
    await message.answer(f"üÜî –í–∞—à Telegram ID: <code>{user_id}</code>", parse_mode="HTML")

@dp.message(Command("add_category"))
async def start_add_category(message: Message):
    if message.from_user.id != ADMIN_ID:
        await message.answer("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return

    user_states[message.from_user.id] = "adding_category"
    await message.answer("üÜï –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:")




@dp.callback_query(F.data.startswith("buy_"))
async def buy_item(callback: CallbackQuery):
    item_id = callback.data.split("_")[1]
    catalog_data = load_catalog()
    item = next((i for i in catalog_data if i["id"] == item_id), None)


    if item:
        user_id = callback.from_user.id
        user_carts.setdefault(user_id, []).append(item)  # –¥–æ–±–∞–≤–∏–º –≤ –∫–æ—Ä–∑–∏–Ω—É

        await callback.message.answer(
            f"‚úÖ {callback.from_user.full_name}, –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–æ—Ä–∑–∏–Ω—É: <b>{item['name']}</b>"
        )
    await callback.answer()
    
@dp.callback_query(F.data.startswith("category_"))
async def show_items_in_category(callback: CallbackQuery):
    selected_category = callback.data.removeprefix("category_")
    catalog_data = load_catalog()

    # –û—Ç—Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    items = [item for item in catalog_data if item.get("category") == selected_category]

    if not items:
        await callback.message.answer("‚ùå –í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤.")
        await callback.answer()
        return

    for item in items:
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üõí –ö—É–ø–∏—Ç—å", callback_data=f"buy_{item['id']}")]
        ])
        text = f"<b>{item['name']}</b>\n–¶–µ–Ω–∞: {item['price']}"
        await callback.message.answer(text, reply_markup=kb)

    await callback.answer()
    
@dp.callback_query(F.data.startswith("menu_"))
async def handle_menu_buttons(callback: CallbackQuery):
    action = callback.data
    user_message = callback.message

    if action == "menu_catalog":
        await show_categories(user_message)
    elif action == "menu_cart":
        await show_cart(user_message)
    elif action == "menu_clear":
        await clear_cart(user_message)
    elif action == "menu_myorders":
        await show_my_orders(user_message)

    await callback.answer()
    
@dp.callback_query(F.data.startswith("cat_"))
async def handle_category_choice(callback: CallbackQuery):
    user_id = callback.from_user.id
    category = callback.data.removeprefix("cat_")

    # –ü—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ –Ω—É–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    if user_id not in adding_state or "name" not in adding_state[user_id] or "price" not in adding_state[user_id]:
        await callback.message.answer("‚ö†Ô∏è –ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–≤–∞—Ä–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞—á–∞—Ç—å —Å /add –∑–∞–Ω–æ–≤–æ.")
        await callback.answer()
        return

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ç–∞–ª–æ–≥
    catalog_file = Path("catalog.json")
    if catalog_file.exists():
        with open(catalog_file, "r", encoding="utf-8") as f:
            catalog_data = json.load(f)
    else:
        catalog_data = []

    new_id = str(len(catalog_data) + 1)
    new_item = {
        "id": new_id,
        "name": adding_state[user_id]["name"],
        "price": adding_state[user_id]["price"],
        "category": category
    }
    catalog_data.append(new_item)

    with open(catalog_file, "w", encoding="utf-8") as f:
        json.dump(catalog_data, f, ensure_ascii=False, indent=2)

    await callback.message.answer(
        f"‚úÖ –¢–æ–≤–∞—Ä <b>{new_item['name']}</b> –∑–∞ <b>{new_item['price']}</b> –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é <b>{category}</b>!",
        parse_mode="HTML"
    )

    # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏–π
    user_states.pop(user_id, None)
    adding_state.pop(user_id, None)
    await callback.answer()



async def main():
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
